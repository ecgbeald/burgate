services:
    rabbitmq:
        image: "rabbitmq:3-management"
        ports:
          - "5672:5672"
          - "15672:15672"
        healthcheck:
            test: rabbitmq-diagnostics check_port_connectivity
            interval: 1s
            timeout: 3s
            retries: 30
        volumes:
          - "rabbitmq_data:/data"
        networks:
            - backend
    mongo:
        image: mongo
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASS}
        ports:
            - "27017:27017"
        networks:
            - backend
        env_file:
            - ".env"
    mongo-express:
        image: mongo-express
        environment:
            - ME_CONFIG_MONGODB_SERVER=mongo
            - ME_CONFIG_MONGODB_PORT=27017
            - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
            - ME_CONFIG_MONGODB_AUTH_USERNAME=${MONGODB_USERNAME}
            - ME_CONFIG_MONGODB_AUTH_PASSWORD=${MONGODB_PASS}
            - ME_CONFIG_BASICAUTH_USERNAME=dev
            - ME_CONFIG_BASICAUTH_PASSWORD=dev
        depends_on:
            - mongo
        ports:
            - "7777:8081"
        networks:
            - backend
        env_file:
            - ".env"
    redis-payment:
        image: redis:7.0-alpine
        restart: always
        volumes:
          - "redis_payment_data:/data"
        networks:
            - backend
    redis-kitchen:
        image: redis:7.0-alpine
        restart: always
        volumes:
          - "redis_kitchen_data:/data"
        networks:
            - backend

    gateway:
        build:
            context: .
            dockerfile: Dockerfile
        environment:
            - ADDR=nginx:443
        ports:
            - "8888:8888"
        restart: unless-stopped
        depends_on:
            rabbitmq:
                condition: service_healthy
            mongo-express:
                condition: service_started
        networks:
            - backend
        volumes:
          - ./:/app
    order-0:
        build:
            context: .
            dockerfile: order/Dockerfile
        environment:
            - PORT=8889
            - ID=0
        restart: unless-stopped
        depends_on:
            - gateway
        networks:
            - backend
        volumes:
            - ./:/app
    order-1:
        build:
            context: .
            dockerfile: order/Dockerfile
        environment:
            - PORT=8889
            - ID=1
        restart: unless-stopped
        depends_on:
            - gateway
        networks:
            - backend
        volumes:
            - ./:/app
    nginx:
        build: nginx
        depends_on:
            - order-0
            - order-1
        networks:
            - backend
    payment:
        build:
            context: .
            dockerfile: payment/Dockerfile
        restart: unless-stopped
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
            - backend
        volumes:
            - ./:/app
    kitchen:
        build:
            context: .
            dockerfile: kitchen/Dockerfile
        environment:
            - ORDERNODECNT=2
        restart: unless-stopped
        depends_on:
            rabbitmq:
                condition: service_healthy
        ports:
            - "8080:8080"
        networks:
            - backend
        volumes:
          - ./:/app
    stripe-server:
        build:
            context: .
            dockerfile: stripe_service/Dockerfile
        restart: unless-stopped
        depends_on:
            - kitchen
        network_mode: "host"
        volumes:
            - ./:/app
    stripe-cli:
        image: stripe/stripe-cli
        container_name: stripe-cli
        command: "listen --api-key {STRIPE_API_KEY} --device-name docker --forward-to localhost:4242/webhook"
        network_mode: "host"
        env_file:
            - ".env"
volumes:
    rabbitmq_data:
    redis_payment_data:
    redis_kitchen_data:

networks:
  backend: